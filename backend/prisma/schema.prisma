generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum gender_enum {
  male
  female
}

model nofitications {
  notification_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sender_name     String
  receiver_name   String
  content         String
  date            DateTime @default(now()) @db.Timestamp(6)
  users           users   @relation(fields: [user_id], references: [user_id])
  user_id         String @db.Uuid
}

enum conversation_type_enum {
  group
  one_to_one
  broadcast
}

enum file_type_enum {
  image
  video
  audio
}

enum message_status_enum {
  sent
  delivered
  read
  failed
}

enum user_action_enum {
  log_in
  log_out
}

enum account_type {
  pro
  standard
}

model users {
  user_id    String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bio        String?
  email      String       @unique
  name       String?
  password   String       @db.VarChar(255)
  gender     gender_enum? @default(male)
  created_at DateTime?    @default(now()) @db.Timestamp(6)

  stars Int @default(0)

  profile_photo_url String?
  cover_photo_url   String?

  user_account_type account_type @default(standard)

  // followers
  followers  users[] @relation("user_follows")
  followings users[] @relation("user_follows")

  // posts and comments
  user_posts    posts[]
  user_comments comments[]

  // chat
  messages      messages[]
  conversations conversations[]

  // sessions
  user_sessions sessions[]

  nofitications     nofitications[]
  users_saved_posts users_saved_posts[]
}

model sessions {
  session_id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  session_token String  @unique
  ip_addr       String?
  user_agent    String?

  session_user    users?  @relation(fields: [session_user_id], references: [user_id])
  session_user_id String? @db.Uuid
}

model post_categories {
  category_id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category_value String
  posts          posts[]
}

model posts {
  post_id     String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String?
  price       BigInt?

  created_at DateTime? @default(now()) @db.Timestamp(6)

  post_category_id String?          @db.Uuid
  post_category    post_categories? @relation(fields: [post_category_id], references: [category_id])

  post_likers String[]

  author_id         String              @db.Uuid
  author            users               @relation(fields: [author_id], references: [user_id])
  comments          comments[]
  medias            medias[]
  users_saved_posts users_saved_posts[]
}

model users_saved_posts {
  post_saving_id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  saved_at DateTime @default(now()) @db.Timestamp(6)

  user_saving    users?  @relation(fields: [user_saving_id], references: [user_id])
  user_saving_id String? @db.Uuid

  saved_post    posts?  @relation(fields: [saved_post_id], references: [post_id])
  saved_post_id String? @db.Uuid
}

model comments {
  comment_id     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  body           String
  comment_likers String[]

  created_at DateTime? @default(now()) @db.Timestamp(6)

  // user
  commentator    users?  @relation(fields: [commentator_id], references: [user_id])
  commentator_id String? @db.Uuid

  // post
  commented_post    posts?  @relation(fields: [commented_post_id], references: [post_id])
  commented_post_id String? @db.Uuid

  // sub comments
  parent_coment     comments? @relation("parent_to_sub_comments", fields: [parent_comment_id], references: [comment_id])
  parent_comment_id String?   @db.Uuid

  sub_comments comments[] @relation("parent_to_sub_comments")
}

model medias {
  media_id String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fileType file_type_enum

  encoding String
  mimetype String

  filename String
  fileUrl  String
  path     String
  size     BigInt

  media_post_id String? @db.Uuid
  media_post    posts?  @relation(fields: [media_post_id], references: [post_id])
}

model attachments {
  attachment_id String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message_id    String          @db.Uuid
  file_url      String          @db.VarChar(255)
  file_type     file_type_enum?
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  messages      messages        @relation(fields: [message_id], references: [message_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_message_id")
}

model conversations {
  conversation_id   String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversation_type conversation_type_enum? @default(one_to_one)
  conversation_name String?                 @db.VarChar(50)
  created_at        DateTime?               @default(now()) @db.Timestamp(6)
  updated_at        DateTime?               @default(now()) @db.Timestamp(6)
  messages          messages[]

  users users[]
}

model messages {
  message_id      String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  conversation_id String               @db.Uuid
  response_id     String?              @db.Uuid
  sender_id       String               @db.Uuid
  recipient_id    String               @db.Uuid
  message_status  message_status_enum? @default(sent)
  content         String
  created_at      DateTime?            @default(now()) @db.Timestamp(6)
  attachments     attachments[]
  conversations   conversations        @relation(fields: [conversation_id], references: [conversation_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_conversation_id")

  users users[]
}

enum user_state_enum {
  online
  offline
}
